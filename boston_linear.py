# -*- coding: utf-8 -*-
"""boston linear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c8Z7LhyH7hN4Fo4zYCXRbyPivib-Sz_k
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

columns_name=["CRIM","ZN","INDUS","CHAS","NOX","RM","AGE","DIS","RAD","TAX","PTRATIO","B","LSTAT","Price"]
df=pd.read_csv("/content/drive/MyDrive/housing.csv",header=None,delimiter=r"\s+",names=columns_name)

df.head()

df.info(

)

df.describe()

#checking missing values

df.isnull().sum() # no missing value in data

# Exploratory Data Analysis
## in regression first need to check
#correlation Near 1 and -1 more related whereas 0 means not related

df.corr()

import seaborn as sns
sns.pairplot(df) ||

plt.scatter(df["RM"],df["Price"])
 plt.xlabel("room no")
 plt.ylabel("price")

sns.regplot(x='RM',y='Price',data=df)

sns.regplot(x='PTRATIO',y='Price',data=df)

## Dividig data into independent and dependent

y=df['Price']
x=df.drop(columns=['Price'])

x

## train test spit
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=34)

## standarizing the data

from base64 import standard_b64decode
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()

x_train=scaler.fit_transform(x_train)

x_test=scaler.transform(x_test)

"""## **MODEL TRAINING**"""

from sklearn.linear_model import LinearRegression

regression=LinearRegression()

regression.fit(x_train,y_train)

# coefficients and intercept

print(regression.coef_)

print(regression.intercept_)

### prediction on test data

reg_prediction=regression.predict(x_test)

reg_prediction

## plotting scatter plot fir prediction
plt.scatter(reg_prediction,y_test)

"""loss between prediction and data"""

loss=y_test-reg_prediction

loss

loss.plot(kind='kde')

"""## **checking accuracy by different metric**"""

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
print(mean_squared_error(y_test,reg_prediction))
print(mean_absolute_error(y_test,reg_prediction))
print(np.sqrt(mean_absolute_error(y_test,reg_prediction)))

"""##**R2 score accuracy checking** **bold text**"""

from sklearn.metrics import r2_score
score=r2_score(y_test,reg_prediction)
score

"""## PICKLE FILE"""

import pickle

pickle.dump(regression,open('regression.pkl','wb'))

pickle_model=pickle.load(open('regression.pkl','rb'))

